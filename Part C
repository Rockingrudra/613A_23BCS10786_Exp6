import java.util.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.Optional;

class Product {
    String name;
    double price;
    String category;

    public Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    @Override
    public String toString() {
        return name + " ($" + price + ")";
    }
}

public class ProductStreamOperations {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", 1200, "Electronics"),
            new Product("Smartphone", 800, "Electronics"),
            new Product("Jeans", 50, "Clothing"),
            new Product("T-shirt", 20, "Clothing"),
            new Product("Blender", 100, "Home Appliances"),
            new Product("Microwave", 150, "Home Appliances"),
            new Product("Sneakers", 80, "Clothing")
        );

        Map<String, List<Product>> groupedByCategory = products.stream()
                .collect(Collectors.groupingBy(p -> p.category));
        System.out.println("Products grouped by category:");
        groupedByCategory.forEach((category, prods) -> {
            System.out.println(category + ": " + prods);
        });

        Map<String, Optional<Product>> mostExpensiveByCategory = products.stream()
                .collect(Collectors.groupingBy(
                    p -> p.category,
                    Collectors.maxBy(Comparator.comparingDouble(p -> p.price))
                ));
        System.out.println("\nMost expensive product by category:");
        mostExpensiveByCategory.forEach((category, productOpt) -> {
            System.out.println(category + ": " + productOpt.orElse(null));
        });

        double averagePrice = products.stream()
                .collect(Collectors.averagingDouble(p -> p.price));
        System.out.println("\nAverage price of all products: $" + averagePrice);
    }
}
